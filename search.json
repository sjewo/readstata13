[{"path":"/articles/readstata13_basic_manual.html","id":"basics-reading-and-writing-stata-files","dir":"Articles","previous_headings":"","what":"Basics: Reading and Writing Stata files","title":"readstata13: Basic Manual","text":"Similar foreign, can use read.dta13 import file. often imported data interest user, additional information available attributes imported file. easy see file created using format 117, implemented Stata 13 can processed later versions Stata. attributes include data label, string Stata users can see, timestamp, formats types needed represent data Stata. case, save.dta13 function used binary doubles write data data type R numeric. byte order refers endianness. file created Little Endian, read.dta13 handles reads writes endianness types.2 read write functions take care conversion missing values, value labels, variable labels.","code":"data (cars)  # save file cars.dta save.dta13(cars, file = \"res/cars.dta\")  # read file cars.dta dat <- read.dta13(\"res/cars.dta\") # prints the attributes attributes(dat) #> $row.names #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #>  #> $names #> [1] \"speed\" \"dist\"  #>  #> $class #> [1] \"data.frame\" #>  #> $datalabel #> [1] \"Written by R\" #>  #> $time.stamp #> [1] \"25 Apr 2025 07:26\" #>  #> $formats #> [1] \"%9.0g\" \"%9.0g\" #>  #> $types #> [1] 65526 65526 #>  #> $val.labels #>        #> \"\" \"\"  #>  #> $var.labels #> [1] \"\" \"\" #>  #> $version #> [1] 117 #>  #> $label.table #> list() #>  #> $expansion.fields #> list() #>  #> $byteorder #> [1] \"LSF\" #>  #> $orig.dim #> [1] 50  2 #>  #> $data.label #> character(0)"},{"path":"/articles/readstata13_basic_manual.html","id":"supported-stata-versions","dir":"Articles","previous_headings":"","what":"Supported Stata Versions","title":"readstata13: Basic Manual","text":"Since forced write dta-file reader, made sure write files readable earlier versions Stata. can achieved version argument save.dta13. Available versions : versions formats users likely find. support format included Stata versions. minimum format support 102 (Stata 1), maximum 121 (Files 32,767 variables. readable Stata 18 & 19 MP.).3 years, format changed allow observations (sometimes introduced SE MP releases Stata), longer strings, variable names, labels, etc. support reading file format, although currently control Stata’s limits. want experiment unsure data fit specific version Stata targeting, good idea choose versions < 7 formats < 110, default foreign::write.dta.","code":"# save a Stata 7 dta file save.dta13(cars, \"res/cars_version.dta\", version = 7)  # read this file and print the format dat3 <- read.dta13(\"res/cars_version.dta\") attr(dat3, \"version\") #> [1] 110"},{"path":"/articles/readstata13_basic_manual.html","id":"working-with-labelled-data","dir":"Articles","previous_headings":"","what":"Working with Labelled Data","title":"readstata13: Basic Manual","text":"Stata datasets contain metadata variable value labels. Since base R doesn’t support labelled data, information stored different attributes data.frame returned read.stata13. data.frames attributes read.dta function foreign package. example, use Stata file “statacar.dta” provided readstata13 package. disable conversion factors start numeric codes categorical data. Variable labels stored var.labels attribute. Labels single variable might retrieved using varlabel() function. information value labels stored complex way. val.labels attribute defines label table column, provides codes labels single variable. label tables stored list label.table attribute. example dataset one column labelled values. corresponding label table fourth column called type_en. vector numeric codes, labels provided element names. function get.label.name() get.label() provide results. Labels often used create levels factor variable. readstata13 provides command simplify process. set.label() returns factor using stored labels.","code":"library(readstata13) x <- read.dta13(system.file(\"extdata/statacar.dta\", package = \"readstata13\"),                 convert.factors = FALSE) attr(x, \"var.labels\") #>  [1] \"Numeric ID\"             \"Brand of car\"           \"Car model\"              #>  [4] \"Car classification\"     \"Horse Power\"            \"Maximum speed\"          #>  [7] \"\"                       \"\"                       \"Launch date\"            #> [10] \"Launch date (calendar)\" \"\" varlabel(x, var.name = \"type\") #>                 type  #> \"Car classification\" attr(x, \"val.labels\") #>                                 type_en                                          #>        \"\"        \"\"        \"\" \"type_en\"        \"\"        \"\"        \"\"        \"\"  #>                                #>        \"\"        \"\"        \"\" attr(x, \"label.table\")$type_en #>         min    Off-Road    Roadster    City car  Family car         max  #> -2147483647           1           2           3           4  2147483620 get.label.name(x, var.name = \"type\") #>      type  #> \"type_en\" get.label(x, \"type_en\") #>         min    Off-Road    Roadster    City car  Family car         max  #> -2147483647           1           2           3           4  2147483620 # Create factor from variable \"type\" x$type_en <- set.label(x, \"type\")  # Display results x[, c(\"type\", \"type_en\")] #>          type    type_en #> 1           2   Roadster #> 2           4 Family car #> 3           3   City car #> 4           4 Family car #> 5           1   Off-Road #> 6           3   City car #> 7  2147483620        max #> 8 -2147483647        min"},{"path":"/articles/readstata13_basic_manual.html","id":"multi-language-support","dir":"Articles","previous_headings":"Working with Labelled Data","what":"Multi Language Support","title":"readstata13: Basic Manual","text":"Since Stata supports multi-language files, labels can provided different languages. lang option set.label() allows choose labels specific language.","code":"# Show available and default language  get.lang(x) #> Available languages: #>  en #>  de #>  #> Default language: #>  en  # Create factor with German labels x$type_de <- set.label(x, \"type\", lang = \"de\")  # Display results x[, c(\"type\", \"type_en\", \"type_de\")] #>          type    type_en      type_de #> 1           2   Roadster   Sportwagen #> 2           4 Family car Familienauto #> 3           3   City car    Stadtauto #> 4           4 Family car Familienauto #> 5           1   Off-Road Geländewagen #> 6           3   City car    Stadtauto #> 7  2147483620        max          max #> 8 -2147483647        min          min"},{"path":"/articles/readstata13_basic_manual.html","id":"compability-with-other-packages","dir":"Articles","previous_headings":"Working with Labelled Data","what":"Compability with other Packages","title":"readstata13: Basic Manual","text":"Packages like expss use stored labels produce descriptive headers tables label axes graph.","code":"# version > 2.8.0 is needed due to a bug in to_label library(labelled)  xl <- read.dta13(system.file(\"extdata/statacar.dta\", package = \"readstata13\"),                 convert.factors = FALSE)  xl <- to_labelled(xl) xl #> # A tibble: 8 × 11 #>      id brand   model    type     hp         max  mileage  ecar ldate ldatecal   #> * <int> <chr>   <chr>   <int>  <int>       <dbl>    <dbl> <int> <int> <date>     #> 1     1 Meyer   Spee…  2   e0    150    1.77e  2  1.02e 1     0     1 2001-01-03 #> 2     2 Meyer   Happ…  4   e0     98    1.45e  2  5.60e 0     0   247 2001-12-31 #> 3     3 Akiko   Susu…  3   e0     45    1.19e  2 NA           0    14 2001-01-23 #> 4     4 Akiko   Susu…  4   e0     80    1.27e  2  6.80e 0     0   134 2001-07-16 #> 5     5 Hutch   Lumb…  1   e0    180    1.56e  2  1.42e 1     0   110 2001-06-11 #> 6     6 Erikson E-Ca…  3   e0     NA   NA        NA           1   100 2001-05-25 #> 7     7 Erikson Maxi…  2.15e9  32740    8.99e307  1.70e38   100    19 2001-01-30 #> 8     7 Erikson Mimi… -2.15e9 -32767 -Inf        -1.70e38  -127     1 2001-01-03 #> # ℹ 1 more variable: modelStrL <chr> library(expss) #> Loading required package: maditr #>  #> Use magrittr pipe '%>%' to chain several operations: #>              mtcars %>% #>                  let(mpg_hp = mpg/hp) %>% #>                  take(mean(mpg_hp), by = am) #>  #>  #> Use 'expss_output_viewer()' to display tables in the RStudio Viewer. #>  To return to the console output, use 'expss_output_default()'. #>  #> Attaching package: 'expss' #> The following object is masked from 'package:labelled': #>  #>     is.labelled #xl <- add_labelled_class(xl)   # set negative hp values to na xl[xl$hp < 0 | is.na(xl$hp), \"hp\"] <- NA  xl %>%    tab_cells(hp) %>%    tab_cols(brand) %>%    tab_stat_mean_sd_n() %>%    tab_pivot() %>%   set_caption(\"Horse power by car brand.\")"},{"path":[]},{"path":"/articles/readstata13_basic_manual.html","id":"partial-reading","dir":"Articles","previous_headings":"Working with Large Datasets","what":"Partial Reading","title":"readstata13: Basic Manual","text":"years, data files grown size. early days Stata, maximum number observations stored uint32_t variables uint16_t. allowed maximum number 4,294,967,295 observations 65,535 variables. Nowadays, limit uint64_t observations (18,446,744,073,709,551,615) uint32_t variables. Thus, easier store large data sets single file, advantages simply storing data come longer import times limited memory bottlenecks. Even though handling gigabyte-wide data works newer workstations, us want invest workstation, especially need fraction data set. cases, readstata13 offers selections ranges observations (first/last n observations , e.g., rows 5-10) selections specific variables. real-world example selection certain variables helpful SOEP dataset.4 dataset divided among different files; best think tables database. common database environment, need make connections files therefore need know key variables different files. dataset collected annually since 1984 grown significantly, many cases many variables different files. Selecting particular variable file resulted reading entire file (n cases k variables), extracting variable, removing variables. Importing large file takes quite , import results large R object needed . selection variables, possible import data want skip everything else, making import process fast memory efficient.","code":"# Read rows 1 to 3 dat_1 <- read.dta13(\"res/cars.dta\", select.rows = c(1,3)); dat_1 #>   speed dist #> 1     4    2 #> 2     4   10 #> 3     7    4  # Read only variable \"dist\" dat_2 <- read.dta13(\"res/cars.dta\", select.cols = \"dist\"); head(dat_2) #>   dist #> 1    2 #> 2   10 #> 3    4 #> 4   22 #> 5   16 #> 6   10"},{"path":"/articles/readstata13_basic_manual.html","id":"compression","dir":"Articles","previous_headings":"Working with Large Datasets","what":"Compression","title":"readstata13: Basic Manual","text":"want minimize memory size written files, can instruct save.dta13 compress = TRUE use smallest available type writing file. First, save.dta13 evaluated safe store numeric vector integer. second step, smallest binary type chosen. R user, notable change re-import, former numeric become integer. significant change file size written dta file.","code":"# Save with compression save.dta13(cars, file = \"res/cars_compress.dta\", compress = TRUE)  # Import and compare types dat2 <- read.dta13(file = \"res/cars_compress.dta\") attr(dat2, \"types\") #> [1] 65530 65529 rbind(file.info(\"res/cars.dta\")[\"size\"],       file.info(\"res/cars_compress.dta\")[\"size\"]) #>                       size #> res/cars.dta          1762 #> res/cars_compress.dta 1112"},{"path":[]},{"path":"/articles/readstata13_basic_manual.html","id":"frames","dir":"Articles","previous_headings":"Advanced Features","what":"Frames","title":"readstata13: Basic Manual","text":"Starting version 16, Stata users can store multiple data frames simultaneously memory (short: frames) save disk “Stata frameset.” corresponding Stata function create “.dtas” file, zip file contains dta file frame. function get.frames prints information frames dtas file: name frame name defined Stata. Use read.dtas import selected frames dtas file. default, read.dtas imports frames returns list data.frames. frame accessible list name defined Stata. restrict import one several frames may use select.frames argument. may also define additional options frame individually. options must provided list structure list(framename = list(param = value)).","code":"dtas_path <- system.file(\"extdata\", \"myproject2.dtas\", package=\"readstata13\")  get.frames(dtas_path) #>       name      filename version #> 1  persons  persons~0000     120 #> 2 counties counties~0001     118 read.dtas(dtas_path) #> Warning in stata_read(filepath, missing.type, select.rows, select.cols_chr, : #> File contains unhandled alias variable in column: 5 #> $persons #>    personid countyid income counties median     ratio #> 1         1        5  30818        5        0.7038001 #> 2         2        3  30752        3        0.4225046 #> 3         3        2  29673        2        0.5230381 #> 4         4        3  32115        3        0.4412310 #> 5         5        2  31189        2        0.5497603 #> 6         6        1  30992        1        0.6725256 #> 7         7        3  34328        3        0.4716356 #> 8         8        3  31508        3        0.4328914 #> 9         9        5  26071        5        0.5953915 #> 10       10        5  29768        5        0.6798210 #> 11       11        2  34757        2        0.6126525 #> 12       12        3  25630        3        0.3521330 #> 13       13        1  29146        1        0.6324675 #> 14       14        5  25752        5        0.5881063 #> 15       15        1  26806        1        0.5816895 #> 16       16        2  34368        2        0.6057957 #> 17       17        3  26914        3        0.3697740 #> 18       18        2  25886        2        0.4562857 #> 19       19        1  29321        1        0.6362650 #> 20       20        5  29571        5        0.6753220 #>  #> $counties #>    countyid median_income #> 1    Brazos         46083 #> 2    Dallas         56732 #> 3    Travis         72785 #> 4    Harris         58664 #> 5    Potter         43788 #> 6   El Paso         44120 #> 7     Bowie         49153 #> 8 Galveston         69674 # read selected frames read.dtas(dtas_path, select.frames = \"counties\") #> $counties #>    countyid median_income #> 1    Brazos         46083 #> 2    Dallas         56732 #> 3    Travis         72785 #> 4    Harris         58664 #> 5    Potter         43788 #> 6   El Paso         44120 #> 7     Bowie         49153 #> 8 Galveston         69674 # read frames with different arguments read.dtas(dtas_path,            read.dta13.options = list(counties = list(select.cols = \"median_income\"),                                      persons = list(select.cols = \"income\"))) #> $persons #>    income #> 1   30818 #> 2   30752 #> 3   29673 #> 4   32115 #> 5   31189 #> 6   30992 #> 7   34328 #> 8   31508 #> 9   26071 #> 10  29768 #> 11  34757 #> 12  25630 #> 13  29146 #> 14  25752 #> 15  26806 #> 16  34368 #> 17  26914 #> 18  25886 #> 19  29321 #> 20  29571 #>  #> $counties #>   median_income #> 1         46083 #> 2         56732 #> 3         72785 #> 4         58664 #> 5         43788 #> 6         44120 #> 7         49153 #> 8         69674"},{"path":"/articles/readstata13_basic_manual.html","id":"long-strings-strl","dir":"Articles","previous_headings":"Advanced Features","what":"Long Strings (strL)","title":"readstata13: Basic Manual","text":"Stata 13, long strings introduced. strings stored dta file data part. keeps data part compact, containing reference string. Since long strings capable storing entire novels, leave decision handle files user. default, replaced; desired, stored attribute R object. blog post, Stata explained possible store binary data strLs.5 allows image, video, audio, text files stored alongside data. Although interesting, currently possible handle data data.frame R.6 Since readstata13 release 0.9.1, possible export files user-defined folder, default current working directory. exported files without file extension specific file type known (may different cell). Therefore, binary file named position data (15_1 15th variable 1st observation), leaving user choose process content. example, first file txt file. second file image PNG format.","code":"# export the strl as binary file to the current working directory dir.create(\"res/strls/\") dat_strl <- read.dta13(\"stata_strl.dta\", strlexport = TRUE, strlpath = \"res/strls/\")  # The folder contains a file for each long string. The first file is a .txt file and the second a .png file. dir(\"res/strls/\") #> [1] \"15_1\" \"16_1\" readLines(\"res/strls/15_1\") #> [1] \"R is a free software environment for statistical computing and graphics. It compiles and runs on a wide variety of UNIX platforms, Windows and MacOS. To download R, please choose your preferred CRAN mirror.\" #> [2] \"\"                                                                                                                                                                                                               #> [3] \"If you have questions about R like how to download and install the software, or what the license terms are, please read our answers to frequently asked questions before you send an email.\"                    #> [4] \"\" library(png) img <- readPNG(\"res/strls/16_1\") grid::grid.raster(img)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jan Marvin Garbuszus. Author. Sebastian Jeworutzki. Author, maintainer. R Core Team. Copyright holder. Magnus Thor Torfason. Contributor. Luke M. Olson. Contributor. Giovanni Righi. Contributor. Kevin Jin. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Garbuszus J, Jeworutzki S (2025). readstata13: Import 'Stata' Data Files. R package version 0.11, https://github.com/sjewo/readstata13.","code":"@Manual{,   title = {readstata13: Import 'Stata' Data Files},   author = {Jan Marvin Garbuszus and Sebastian Jeworutzki},   year = {2025},   note = {R package version 0.11},   url = {https://github.com/sjewo/readstata13}, }"},{"path":"/index.html","id":"readstata13-read-and-write-the-stata-file-format-with-r","dir":"","previous_headings":"","what":"Import Stata Data Files","title":"Import Stata Data Files","text":"Package read write Stata file formats (version 17 older) R data.frame. dta file format versions 102 121 supported (including dtas files). function read.dta foreign package imports dta files Stata versions <= 12. Due different structure features dta 117 files, wrote new file reader Rcpp. Additionally package supports many features Stata dta format like label sets different languages (?set.lang) business calendars (?.caldays).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Import Stata Data Files","text":"package hosted CRAN.","code":"install.packages(\"readstata13\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Import Stata Data Files","text":"","code":"library(readstata13) dat <- read.dta13(\"path to file.dta\") save.dta13(dat, file=\"newfile.dta\")"},{"path":"/index.html","id":"development-version","dir":"","previous_headings":"","what":"Development Version","title":"Import Stata Data Files","text":"install current release github need platform specific build tools. Windows current installation Rtools necessary, OS X users need install Xcode. install current development version github:","code":"# install.packages(\"remotes\") remotes::install_github(\"sjewo/readstata13\", ref=\"0.11\") remotes::install_github(\"sjewo/readstata13\", ref=\"testing\")"},{"path":"/index.html","id":"changelog-and-features","dir":"","previous_headings":"","what":"Changelog and Features","title":"Import Stata Data Files","text":"See News full changelog.","code":""},{"path":"/index.html","id":"readstata13-and-foreign","dir":"","previous_headings":"","what":"readstata13 and foreign","title":"Import Stata Data Files","text":"attributes resulting data.frame largely similar data.frames produced foreign. Since newer Stata files require additional attributes, results .equal() identical() FALSE data.frames read foreign::read.dta read.dta13(). Otherwise, data.frames produced functions identical.","code":"library(foreign) library(readstata13)  # with factors r12 <- read.dta(\"http://www.stata-press.com/data/r12/auto.dta\") r13 <- read.dta13(\"http://www.stata-press.com/data/r13/auto.dta\")  all.equal(r12, r13, check.attributes = FALSE)  # without factors r12 <- read.dta(\"http://www.stata-press.com/data/r12/auto.dta\",                  convert.factors = FALSE) r13 <- read.dta13(\"http://www.stata-press.com/data/r13/auto.dta\",                    convert.factors = FALSE)  all.equal(r12, r13, check.attributes = FALSE)"},{"path":"/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"Import Stata Data Files","text":"Marvin Garbuszus (JanMarvin) Sebastian Jeworutzki (sjewo)","code":""},{"path":"/index.html","id":"licence","dir":"","previous_headings":"","what":"Licence","title":"Import Stata Data Files","text":"GPL2","code":""},{"path":"/reference/as.caldays.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Stata business calendar dates in readable dates. — as.caldays","title":"Convert Stata business calendar dates in readable dates. — as.caldays","text":"Convert Stata business calendar dates readable dates.","code":""},{"path":"/reference/as.caldays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Stata business calendar dates in readable dates. — as.caldays","text":"","code":"as.caldays(buisdays, cal, format = \"%Y-%m-%d\")"},{"path":"/reference/as.caldays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Stata business calendar dates in readable dates. — as.caldays","text":"buisdays numeric Vector business dates cal data.frame Conversion table business calendar dates format character String date format .Date","code":""},{"path":"/reference/as.caldays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Stata business calendar dates in readable dates. — as.caldays","text":"Returns vector readable dates.","code":""},{"path":"/reference/as.caldays.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert Stata business calendar dates in readable dates. — as.caldays","text":"Jan Marvin Garbuszus jan.garbuszus@ruhr-uni-bochum.de Sebastian Jeworutzki sebastian.jeworutzki@ruhr-uni-bochum.de","code":""},{"path":"/reference/as.caldays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Stata business calendar dates in readable dates. — as.caldays","text":"","code":"# read business calendar and data sp500 <- stbcal(system.file(\"extdata/sp500.stbcal\", package=\"readstata13\")) dat <- read.dta13(system.file(\"extdata/statacar.dta\", package=\"readstata13\"))  # convert dates and check dat$ldatescal2 <- as.caldays(dat$ldate, sp500) all(dat$ldatescal2==dat$ldatescal) #> [1] TRUE"},{"path":"/reference/get.frames.html","id":null,"dir":"Reference","previous_headings":"","what":"List frames in Stata dtas-files — get.frames","title":"List frames in Stata dtas-files — get.frames","text":"Stata 18 introduced frame files (file extension `.dtas`) contain zipped `dta` files. helper functions imports files returns list data.frames.","code":""},{"path":"/reference/get.frames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List frames in Stata dtas-files — get.frames","text":"","code":"get.frames(path)"},{"path":"/reference/get.frames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List frames in Stata dtas-files — get.frames","text":"path path .dtas file","code":""},{"path":"/reference/get.frames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List frames in Stata dtas-files — get.frames","text":"Returns data.frame frame names, internal filenames dta file format version.","code":""},{"path":"/reference/get.frames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List frames in Stata dtas-files — get.frames","text":"","code":"path <- system.file(\"extdata\", \"myproject2.dtas\", package=\"readstata13\")  # print all frames in myproject2.dtas get.frames(path) #>       name      filename version #> 1  persons  persons~0000     120 #> 2 counties counties~0001     118"},{"path":"/reference/get.label.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Stata Label Table for a Label Set — get.label","title":"Get Stata Label Table for a Label Set — get.label","text":"Retrieve value labels specific Stata label set.","code":""},{"path":"/reference/get.label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Stata Label Table for a Label Set — get.label","text":"","code":"get.label(dat, label.name)"},{"path":"/reference/get.label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Stata Label Table for a Label Set — get.label","text":"dat data.frame. Data.frame created read.dta13. label.name character. Name Stata label set","code":""},{"path":"/reference/get.label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Stata Label Table for a Label Set — get.label","text":"Returns named vector code numbers","code":""},{"path":"/reference/get.label.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Stata Label Table for a Label Set — get.label","text":"function returns table factor levels represent  Stata label set. name label set variable can obtained  get.label.name.","code":""},{"path":"/reference/get.label.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Stata Label Table for a Label Set — get.label","text":"Jan Marvin Garbuszus jan.garbuszus@ruhr-uni-bochum.de Sebastian Jeworutzki sebastian.jeworutzki@ruhr-uni-bochum.de","code":""},{"path":"/reference/get.label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Stata Label Table for a Label Set — get.label","text":"","code":"dat <- read.dta13(system.file(\"extdata/statacar.dta\", package=\"readstata13\")) labname <- get.label.name(dat,\"type\") get.label(dat, labname) #>         min    Off-Road    Roadster    City car  Family car         max  #> -2147483647           1           2           3           4  2147483620"},{"path":"/reference/get.label.name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Names of Stata Label Set — get.label.name","title":"Get Names of Stata Label Set — get.label.name","text":"Retrieves Stata label set dataset vector variable names.","code":""},{"path":"/reference/get.label.name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Names of Stata Label Set — get.label.name","text":"","code":"get.label.name(dat, var.name = NULL, lang = NA)"},{"path":"/reference/get.label.name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Names of Stata Label Set — get.label.name","text":"dat data.frame. Data.frame created read.dta13. var.name character vector. Variable names. NULL, get names label sets. lang character. Label language. Default language defined get.lang used NA","code":""},{"path":"/reference/get.label.name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Names of Stata Label Set — get.label.name","text":"Returns named vector variable labels","code":""},{"path":"/reference/get.label.name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Names of Stata Label Set — get.label.name","text":"Stata stores factor labels variable independent labels sets.  function retrieves name label set variable.","code":""},{"path":"/reference/get.label.name.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Names of Stata Label Set — get.label.name","text":"Jan Marvin Garbuszus jan.garbuszus@ruhr-uni-bochum.de Sebastian Jeworutzki sebastian.jeworutzki@ruhr-uni-bochum.de","code":""},{"path":"/reference/get.label.tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all Stata Label Sets for a Data.frame — get.label.tables","title":"Get all Stata Label Sets for a Data.frame — get.label.tables","text":"Retrieve value labels variables.","code":""},{"path":"/reference/get.label.tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all Stata Label Sets for a Data.frame — get.label.tables","text":"","code":"get.label.tables(dat)"},{"path":"/reference/get.label.tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all Stata Label Sets for a Data.frame — get.label.tables","text":"dat data.frame. Data.frame created read.dta13.","code":""},{"path":"/reference/get.label.tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all Stata Label Sets for a Data.frame — get.label.tables","text":"Returns named list label tables","code":""},{"path":"/reference/get.label.tables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get all Stata Label Sets for a Data.frame — get.label.tables","text":"function returns factor levels represent  Stata label set variables.","code":""},{"path":"/reference/get.label.tables.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get all Stata Label Sets for a Data.frame — get.label.tables","text":"Jan Marvin Garbuszus jan.garbuszus@ruhr-uni-bochum.de Sebastian Jeworutzki sebastian.jeworutzki@ruhr-uni-bochum.de","code":""},{"path":"/reference/get.label.tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all Stata Label Sets for a Data.frame — get.label.tables","text":"","code":"dat <- read.dta13(system.file(\"extdata/statacar.dta\", package=\"readstata13\")) get.label.tables(dat) #> $id #> NULL #>  #> $brand #> NULL #>  #> $model #> NULL #>  #> $type #>         min    Off-Road    Roadster    City car  Family car         max  #> -2147483647           1           2           3           4  2147483620  #>  #> $hp #> NULL #>  #> $max #> NULL #>  #> $mileage #> NULL #>  #> $ecar #> NULL #>  #> $ldate #> NULL #>  #> $ldatecal #> NULL #>  #> $modelStrL #> NULL #>"},{"path":"/reference/get.lang.html","id":null,"dir":"Reference","previous_headings":"","what":"Show Default Label Language — get.lang","title":"Show Default Label Language — get.lang","text":"Displays informations defined label languages.","code":""},{"path":"/reference/get.lang.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show Default Label Language — get.lang","text":"","code":"get.lang(dat, print = T)"},{"path":"/reference/get.lang.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show Default Label Language — get.lang","text":"dat data.frame. Data.frame created read.dta13. print logical. TRUE, print available languages default language.","code":""},{"path":"/reference/get.lang.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show Default Label Language — get.lang","text":"Returns list two components: languages: Vector label languages used dataset default: Name actual default label language, otherwise NA","code":""},{"path":"/reference/get.lang.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show Default Label Language — get.lang","text":"Stata allows define multiple label sets different languages.  functions reports available languages selected default  language.","code":""},{"path":"/reference/get.lang.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Show Default Label Language — get.lang","text":"Jan Marvin Garbuszus jan.garbuszus@ruhr-uni-bochum.de Sebastian Jeworutzki sebastian.jeworutzki@ruhr-uni-bochum.de","code":""},{"path":"/reference/get.origin.codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Origin Code Numbers for Factors — get.origin.codes","title":"Get Origin Code Numbers for Factors — get.origin.codes","text":"Recreates code numbers factor stored Stata dataset.","code":""},{"path":"/reference/get.origin.codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Origin Code Numbers for Factors — get.origin.codes","text":"","code":"get.origin.codes(x, label.table)"},{"path":"/reference/get.origin.codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Origin Code Numbers for Factors — get.origin.codes","text":"x factor. Factor obtain code label.table table. Table factor levels obtained get.label.","code":""},{"path":"/reference/get.origin.codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Origin Code Numbers for Factors — get.origin.codes","text":"Returns integer original codes","code":""},{"path":"/reference/get.origin.codes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Origin Code Numbers for Factors — get.origin.codes","text":"converting numeric variables factors, original code  numbers lost. function reconstructs codes attribute  label.table.","code":""},{"path":"/reference/get.origin.codes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Origin Code Numbers for Factors — get.origin.codes","text":"Jan Marvin Garbuszus jan.garbuszus@ruhr-uni-bochum.de Sebastian Jeworutzki sebastian.jeworutzki@ruhr-uni-bochum.de","code":""},{"path":"/reference/get.origin.codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Origin Code Numbers for Factors — get.origin.codes","text":"","code":"dat <- read.dta13(system.file(\"extdata/statacar.dta\", package=\"readstata13\")) labname <- get.label.name(dat,\"type\") labtab <- get.label(dat, labname)  # comparsion get.origin.codes(dat$type, labtab) #> [1]           2           4           3           4           1           3 #> [7]  2147483620 -2147483647 as.integer(dat$type) #> [1] 3 5 4 5 2 4 6 1"},{"path":"/reference/maxchar.html","id":null,"dir":"Reference","previous_headings":"","what":"Check max char length of data.frame vectors — maxchar","title":"Check max char length of data.frame vectors — maxchar","text":"Stata requires us provide maximum size charactervector every row stored bit region size.","code":""},{"path":"/reference/maxchar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check max char length of data.frame vectors — maxchar","text":"","code":"maxchar(x)"},{"path":"/reference/maxchar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check max char length of data.frame vectors — maxchar","text":"x vector data frame","code":""},{"path":"/reference/maxchar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check max char length of data.frame vectors — maxchar","text":"Ex: max chars size four, _ character vector: 1. row: four 3. row: one_ 4. row: ____ character vector contains missings empty, assign value one, since Stata otherwise handle write.","code":""},{"path":"/reference/read.dta13.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Stata Binary Files — read.dta13","title":"Read Stata Binary Files — read.dta13","text":"read.dta13 reads Stata dta-file imports data  data.frame.","code":""},{"path":"/reference/read.dta13.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Stata Binary Files — read.dta13","text":"","code":"read.dta13(   file,   convert.factors = TRUE,   generate.factors = FALSE,   encoding = \"UTF-8\",   fromEncoding = NULL,   convert.underscore = FALSE,   missing.type = FALSE,   convert.dates = TRUE,   replace.strl = TRUE,   add.rownames = FALSE,   nonint.factors = FALSE,   select.rows = NULL,   select.cols = NULL,   strlexport = FALSE,   strlpath = \".\",   tz = \"GMT\" )"},{"path":"/reference/read.dta13.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Stata Binary Files — read.dta13","text":"file character. Path dta file want import. convert.factors logical. TRUE, factors Stata value labels created. generate.factors logical. TRUE convert.factors TRUE, missing factor labels created integers. duplicated labels found, unique labels generated according following scheme: \"label_(integer code)\". encoding character. Strings can converted Windows-1252 UTF-8 system encoding. Options \"latin1\" \"UTF-8\" specify target encoding explicitly. Since Stata 14 files UTF-8 encoded may contain strings displayed current locale. Set encoding=NULL stop reencoding. fromEncoding character. expect strings encoded \"CP1252\" Stata Versions 13 older. dta files saved Stata 14 newer \"UTF-8\" used. situation used encoding can differ Stata 14 files must manually set. convert.underscore logical. TRUE, \"_\" variable names changed \".\" missing.type logical. Stata knows 27 different missing types: ., ., .b, ..., .z. TRUE, attribute missing  created. convert.dates logical. TRUE, Stata dates converted. replace.strl logical. TRUE, replace reference strL string data.frame actual value. strl attribute removed data.frame (see details). add.rownames logical. TRUE, first column used rownames. Variable dropped afterwards. nonint.factors logical. TRUE, factors labels assigned variables type float double. select.rows integer. Vector one two numbers. single value rows 1:val selected. two values range selected rows range selected. select.cols character. numeric. Vector variables select. Either variable names position. strlexport logical. strl content exported binary files? strlpath character. Path strl export. tz character. time zone specification used POSIXct values. ‘\"\"’ current time zone, ‘\"GMT\"’ UTC (Universal Time, Coordinated).","code":""},{"path":"/reference/read.dta13.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Stata Binary Files — read.dta13","text":"function returns data.frame attributes. attributes  include datalabel: Dataset label time.stamp: Timestamp file creation formats: Stata display formats. May used    sprintf types: Stata data type (see Stata Corp 2014) val.labels: variable name associated value    labels \"label\" var.labels: Variable labels version: dta file format version label.table: List value labels. strl: Character vector long strings new strl string    variable type. name every element identifier. expansion.fields: list providing variable name, characteristic name    contents Stata characteristic field. missing: List numeric vectors Stata missing type    variable. byteorder: Byteorder dta-file. LSF MSF. orig.dim: Dimension recorded inside dta-file.","code":""},{"path":"/reference/read.dta13.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Stata Binary Files — read.dta13","text":"filename url, file downloaded temporary  file read afterwards. Stata files encoded ansinew. Depending system's default  encoding certain characters may appear wrong. Using correct encoding may  fix . Variable names stored dta-file used resulting  data.frame. Stata types char, byte, int become integer; float  double become numerics. R knows single missing type, Stata  knows 27, Stata missings become NA R.  need keep  track Statas original missing types, may use  missing.type=TRUE. Stata dates converted R's Date class way foreign handles dates. Stata 13 introduced new character type called strL. strLs able store  strings 2 billion characters.  R able store  strings size character vector, printed representation  vectors looks rather cluttered, possible save  reference data.frame option replace.strl=FALSE. R, may use rownames store characters (see instance  data(swiss)). Stata, possible rownames  stored variable. want use rownames, set add.rownames TRUE.  first variable dta-file hold rownames  resulting data.frame. Reading dta-files older newer versions 13 introduced  version 0.8. Stata 18 introduced alias variables frame files. Alias variables  currently ignored reading file warning printed. Stata  frame files (file extension `.dtas`) contain zipped `dta` files can  imported read.dtas.","code":""},{"path":"/reference/read.dta13.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read Stata Binary Files — read.dta13","text":"read.dta13 uses GPL 2 licensed code Thomas Lumley R-core members  foreign::read.dta().","code":""},{"path":"/reference/read.dta13.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read Stata Binary Files — read.dta13","text":"Stata Corp (2014): Description .dta file format  https://www.stata.com/help.cgi?dta","code":""},{"path":[]},{"path":"/reference/read.dta13.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read Stata Binary Files — read.dta13","text":"Jan Marvin Garbuszus jan.garbuszus@ruhr-uni-bochum.de Sebastian Jeworutzki sebastian.jeworutzki@ruhr-uni-bochum.de","code":""},{"path":"/reference/read.dta13.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Stata Binary Files — read.dta13","text":"","code":"if (FALSE) { # \\dontrun{   library(readstata13)   r13 <- read.dta13(\"https://www.stata-press.com/data/r13/auto.dta\") } # }"},{"path":"/reference/read.dtas.html","id":null,"dir":"Reference","previous_headings":"","what":"Read frames from Stata dtas-files — read.dtas","title":"Read frames from Stata dtas-files — read.dtas","text":"Stata 18 introduced frame files (file extension `.dtas`) contain zipped `dta` files. helper functions imports files returns list data.frames.","code":""},{"path":"/reference/read.dtas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read frames from Stata dtas-files — read.dtas","text":"","code":"read.dtas(path, select.frames = NULL, read.dta13.options = NULL)"},{"path":"/reference/read.dtas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read frames from Stata dtas-files — read.dtas","text":"path path .dtas file select.frames character vector read.dta13.options list parameters used  read.dta13. list must following structure: list(framename = list(param = value))","code":""},{"path":"/reference/read.dtas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read frames from Stata dtas-files — read.dtas","text":"Returns named list data.frames.","code":""},{"path":"/reference/read.dtas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read frames from Stata dtas-files — read.dtas","text":"","code":"path <- system.file(\"extdata\", \"myproject2.dtas\", package=\"readstata13\")  # read all frames in myproject2.dtas read.dtas(path) #> Warning: File contains unhandled alias variable in column: 5 #> $persons #>    personid countyid income counties median     ratio #> 1         1        5  30818        5        0.7038001 #> 2         2        3  30752        3        0.4225046 #> 3         3        2  29673        2        0.5230381 #> 4         4        3  32115        3        0.4412310 #> 5         5        2  31189        2        0.5497603 #> 6         6        1  30992        1        0.6725256 #> 7         7        3  34328        3        0.4716356 #> 8         8        3  31508        3        0.4328914 #> 9         9        5  26071        5        0.5953915 #> 10       10        5  29768        5        0.6798210 #> 11       11        2  34757        2        0.6126525 #> 12       12        3  25630        3        0.3521330 #> 13       13        1  29146        1        0.6324675 #> 14       14        5  25752        5        0.5881063 #> 15       15        1  26806        1        0.5816895 #> 16       16        2  34368        2        0.6057957 #> 17       17        3  26914        3        0.3697740 #> 18       18        2  25886        2        0.4562857 #> 19       19        1  29321        1        0.6362650 #> 20       20        5  29571        5        0.6753220 #>  #> $counties #>    countyid median_income #> 1    Brazos         46083 #> 2    Dallas         56732 #> 3    Travis         72785 #> 4    Harris         58664 #> 5    Potter         43788 #> 6   El Paso         44120 #> 7     Bowie         49153 #> 8 Galveston         69674 #>   # read selected frames read.dtas(path, select.frames = c(\"persons\", \"counties\")) #> Warning: File contains unhandled alias variable in column: 5 #> $persons #>    personid countyid income counties median     ratio #> 1         1        5  30818        5        0.7038001 #> 2         2        3  30752        3        0.4225046 #> 3         3        2  29673        2        0.5230381 #> 4         4        3  32115        3        0.4412310 #> 5         5        2  31189        2        0.5497603 #> 6         6        1  30992        1        0.6725256 #> 7         7        3  34328        3        0.4716356 #> 8         8        3  31508        3        0.4328914 #> 9         9        5  26071        5        0.5953915 #> 10       10        5  29768        5        0.6798210 #> 11       11        2  34757        2        0.6126525 #> 12       12        3  25630        3        0.3521330 #> 13       13        1  29146        1        0.6324675 #> 14       14        5  25752        5        0.5881063 #> 15       15        1  26806        1        0.5816895 #> 16       16        2  34368        2        0.6057957 #> 17       17        3  26914        3        0.3697740 #> 18       18        2  25886        2        0.4562857 #> 19       19        1  29321        1        0.6362650 #> 20       20        5  29571        5        0.6753220 #>  #> $counties #>    countyid median_income #> 1    Brazos         46083 #> 2    Dallas         56732 #> 3    Travis         72785 #> 4    Harris         58664 #> 5    Potter         43788 #> 6   El Paso         44120 #> 7     Bowie         49153 #> 8 Galveston         69674 #>   # read only frame counties read.dtas(path, select.frames = c(\"counties\")) #> $counties #>    countyid median_income #> 1    Brazos         46083 #> 2    Dallas         56732 #> 3    Travis         72785 #> 4    Harris         58664 #> 5    Potter         43788 #> 6   El Paso         44120 #> 7     Bowie         49153 #> 8 Galveston         69674 #>   # read frames with different arguments read.dtas(path,            read.dta13.options = list(counties = list(select.cols = \"median_income\"),                                      persons = list(select.cols = \"income\"))) #> $persons #>    income #> 1   30818 #> 2   30752 #> 3   29673 #> 4   32115 #> 5   31189 #> 6   30992 #> 7   34328 #> 8   31508 #> 9   26071 #> 10  29768 #> 11  34757 #> 12  25630 #> 13  29146 #> 14  25752 #> 15  26806 #> 16  34368 #> 17  26914 #> 18  25886 #> 19  29321 #> 20  29571 #>  #> $counties #>   median_income #> 1         46083 #> 2         56732 #> 3         72785 #> 4         58664 #> 5         43788 #> 6         44120 #> 7         49153 #> 8         69674 #>"},{"path":"/reference/readstata13.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Stata Data Files — readstata13","title":"Import Stata Data Files — readstata13","text":"Function read Stata file format data.frame.","code":""},{"path":"/reference/readstata13.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Import Stata Data Files — readstata13","text":"catch bug, please sue us, money.","code":""},{"path":[]},{"path":"/reference/readstata13.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import Stata Data Files — readstata13","text":"Marvin Garbuszus jan.garbuszus@ruhr-uni-bochum.de Sebastian Jeworutzki sebastian.jeworutzki@ruhr-uni-bochum.de","code":""},{"path":"/reference/save.dta13.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Stata Binary Files — save.dta13","title":"Write Stata Binary Files — save.dta13","text":"save.dta13 writes Stata dta-file bytewise saves data dta-file.","code":""},{"path":"/reference/save.dta13.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Stata Binary Files — save.dta13","text":"","code":"save.dta13(   data,   file,   data.label = NULL,   time.stamp = TRUE,   convert.factors = TRUE,   convert.dates = TRUE,   tz = \"GMT\",   add.rownames = FALSE,   compress = FALSE,   version = 117,   convert.underscore = FALSE )"},{"path":"/reference/save.dta13.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Stata Binary Files — save.dta13","text":"data data.frame. data.frame Object. file character. Path dta file want export. data.label character. Name dta-file. time.stamp logical. TRUE, add time.stamp dta-file. convert.factors logical. TRUE, factors converted Stata variables labels. Stata expects strings encoded Windows-1252, levels recoded.  Character can mapped Windows-1252 saved hexcode. convert.dates logical. TRUE, dates converted Stata date time format. Code foreign::write.dta tz character. time zone specification used POSIXct values dates (convert.dates TRUE). ‘\"\"’ current time zone, ‘\"GMT\"’ UTC  (Universal Time, Coordinated). add.rownames logical. TRUE, new variable rownames added dta-file. compress logical. TRUE, resulting dta-file use Statas numeric-vartypes. version numeric. Stata format resulting dta-file either Stata version number (6 - 16) internal Stata dta-format (e.g. 117 Stata 13). Support large datasets: Use version=\"15mp\" save dataset new Stata 15/16 MP file format. feature thoroughly tested yet. convert.underscore logical. TRUE, non numerics non alphabet characters converted underscores.","code":""},{"path":"/reference/save.dta13.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Stata Binary Files — save.dta13","text":"function writes dta-file disk. following features  dta file format supported: datalabel: Dataset label time.stamp: Timestamp file creation formats: Stata display formats. May used   sprintf type: Stata data type (see Stata Corp 2014) var.labels: Variable labels version: dta file format version strl: List character vectors new strL string variable    type. first element identifier second element    string.","code":""},{"path":"/reference/save.dta13.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Write Stata Binary Files — save.dta13","text":"Stata Corp (2014): Description .dta file format  https://www.stata.com/help.cgi?dta","code":""},{"path":[]},{"path":"/reference/save.dta13.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write Stata Binary Files — save.dta13","text":"Jan Marvin Garbuszus jan.garbuszus@ruhr-uni-bochum.de Sebastian Jeworutzki sebastian.jeworutzki@ruhr-uni-bochum.de","code":""},{"path":"/reference/save.dta13.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Stata Binary Files — save.dta13","text":"","code":"if (FALSE) { # \\dontrun{   library(readstata13)   save.dta13(cars, file=\"cars.dta\") } # }"},{"path":"/reference/saveToExport.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if numeric vector can be expressed as integer vector — saveToExport","title":"Check if numeric vector can be expressed as integer vector — saveToExport","text":"Compression can reduce numeric vectors integers vector contain integer type data.","code":""},{"path":"/reference/saveToExport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if numeric vector can be expressed as integer vector — saveToExport","text":"","code":"saveToExport(x)"},{"path":"/reference/saveToExport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if numeric vector can be expressed as integer vector — saveToExport","text":"x vector data frame","code":""},{"path":"/reference/set.label.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Stata Labels to a Variable — set.label","title":"Assign Stata Labels to a Variable — set.label","text":"Assign value labels Stata label set variable. duplicated  labels found, unique labels generated according following  scheme: \"label_(integer code)\". Levels without labels become <NA>.","code":""},{"path":"/reference/set.label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Stata Labels to a Variable — set.label","text":"","code":"set.label(dat, var.name, lang = NA)"},{"path":"/reference/set.label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Stata Labels to a Variable — set.label","text":"dat data.frame. Data.frame created read.dta13. var.name character. Name variable data.frame lang character. Label language. Default language defined get.lang used NA","code":""},{"path":"/reference/set.label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Stata Labels to a Variable — set.label","text":"Returns labeled factor","code":""},{"path":"/reference/set.label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign Stata Labels to a Variable — set.label","text":"","code":"dat <- read.dta13(system.file(\"extdata/statacar.dta\", package=\"readstata13\"),                   convert.factors=FALSE)  # compare vectors set.label(dat, \"type\") #> [1] Roadster   Family car City car   Family car Off-Road   City car   max        #> [8] min        #> Levels: min Off-Road Roadster City car Family car max dat$type #> [1]           2           4           3           4           1           3 #> [7]  2147483620 -2147483647  # German label set.label(dat, \"type\", \"de\") #> [1] Sportwagen   Familienauto Stadtauto    Familienauto Geländewagen #> [6] Stadtauto    max          min          #> Levels: min Geländewagen Sportwagen Stadtauto Familienauto max"},{"path":"/reference/set.lang.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Stata Language Labels — set.lang","title":"Assign Stata Language Labels — set.lang","text":"Changes default label language dataset. Variables generated labels (option generate.labels=TRUE) kept unchanged.","code":""},{"path":"/reference/set.lang.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Stata Language Labels — set.lang","text":"","code":"set.lang(dat, lang = NA, generate.factors = FALSE)"},{"path":"/reference/set.lang.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Stata Language Labels — set.lang","text":"dat data.frame. Data.frame created read.dta13. lang character. Label language. Default language defined get.lang used NA generate.factors logical. TRUE, missing factor levels generated.","code":""},{"path":"/reference/set.lang.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Stata Language Labels — set.lang","text":"Returns data.frame value labels language \"lang\".","code":""},{"path":"/reference/set.lang.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Assign Stata Language Labels — set.lang","text":"Jan Marvin Garbuszus jan.garbuszus@ruhr-uni-bochum.de Sebastian Jeworutzki sebastian.jeworutzki@ruhr-uni-bochum.de","code":""},{"path":"/reference/set.lang.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign Stata Language Labels — set.lang","text":"","code":"dat <- read.dta13(system.file(\"extdata/statacar.dta\", package=\"readstata13\")) get.lang(dat) #> Available languages: #>  en #>  de #>  #> Default language: #>  en varlabel(dat) #>                       id                    brand                    model  #>             \"Numeric ID\"           \"Brand of car\"              \"Car model\"  #>                     type                       hp                      max  #>     \"Car classification\"            \"Horse Power\"          \"Maximum speed\"  #>                  mileage                     ecar                    ldate  #>                       \"\"                       \"\"            \"Launch date\"  #>                 ldatecal                modelStrL  #> \"Launch date (calendar)\"                       \"\"   # set German label datDE <- set.lang(dat, \"de\") #> Replacing value labels. This might take some time... #> ====================== get.lang(datDE) #> Available languages: #>  en #>  de #>  #> Default language: #>  de varlabel(datDE) #>                            id                         brand  #>               \"Numerische ID\"             \"Herstellermarke\"  #>                         model                          type  #>                  \"Automodell\"              \"Klassifikation\"  #>                            hp                           max  #>               \"Pferdestärken\"       \"Höchstgeschwindigkeit\"  #>                       mileage                          ecar  #>                            \"\"                            \"\"  #>                         ldate                      ldatecal  #>            \"Einführungsdatum\" \"Einführungsdatum (Kalender)\"  #>                     modelStrL  #>                            \"\""},{"path":"/reference/stbcal.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Stata business calendar files — stbcal","title":"Parse Stata business calendar files — stbcal","text":"Create conversion table business calendar dates.","code":""},{"path":"/reference/stbcal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Stata business calendar files — stbcal","text":"","code":"stbcal(stbcalfile)"},{"path":"/reference/stbcal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Stata business calendar files — stbcal","text":"stbcalfile stbcal-file Stata business calendar file created Stata.","code":""},{"path":"/reference/stbcal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Stata business calendar files — stbcal","text":"Returns data.frame two cols: range: date matching businessdate. Date format. buisdays: Stata business calendar day. Integer format.","code":""},{"path":"/reference/stbcal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse Stata business calendar files — stbcal","text":"Stata 12 introduced business calendar format. Business dates integer numbers certain range days, weeks, months years. range days omitted (e.g. weekends holidays). business calendar created, stbcal file matching calendar created. file required read business calendar. parser reads stbcal- file returns data.frame dates matching business calendar dates. dta-file containing Stata business dates imported read.stata13() shows formats stdcal file required (e.g. \" sp500.stbcal). Stata allows adding short description called purpose. added attribute resulting data.frame.","code":""},{"path":"/reference/stbcal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parse Stata business calendar files — stbcal","text":"Jan Marvin Garbuszus jan.garbuszus@ruhr-uni-bochum.de Sebastian Jeworutzki sebastian.jeworutzki@ruhr-uni-bochum.de","code":""},{"path":"/reference/stbcal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Stata business calendar files — stbcal","text":"","code":"sp500 <- stbcal(system.file(\"extdata/sp500.stbcal\", package=\"readstata13\"))"},{"path":"/reference/varlabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and assign Stata Variable Labels — varlabel","title":"Get and assign Stata Variable Labels — varlabel","text":"Retrieve set variable labels dataset.","code":""},{"path":"/reference/varlabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and assign Stata Variable Labels — varlabel","text":"","code":"varlabel(dat, var.name = NULL, lang = NA)  varlabel(dat) <- value"},{"path":"/reference/varlabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and assign Stata Variable Labels — varlabel","text":"dat data.frame. Data.frame created read.dta13. var.name character vector. Variable names. NULL, get label variables. lang character. Label language. Default language defined get.lang used NA value character vector. Character vector size ncol(data) variable names.","code":""},{"path":"/reference/varlabel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and assign Stata Variable Labels — varlabel","text":"Returns named vector variable labels","code":""},{"path":"/reference/varlabel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get and assign Stata Variable Labels — varlabel","text":"Jan Marvin Garbuszus jan.garbuszus@ruhr-uni-bochum.de Sebastian Jeworutzki sebastian.jeworutzki@ruhr-uni-bochum.de","code":""},{"path":"/reference/varlabel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and assign Stata Variable Labels — varlabel","text":"","code":"dat <- read.dta13(system.file(\"extdata/statacar.dta\", package=\"readstata13\"),                   convert.factors=FALSE)  # display variable labels  varlabel(dat) #>                       id                    brand                    model  #>             \"Numeric ID\"           \"Brand of car\"              \"Car model\"  #>                     type                       hp                      max  #>     \"Car classification\"            \"Horse Power\"          \"Maximum speed\"  #>                  mileage                     ecar                    ldate  #>                       \"\"                       \"\"            \"Launch date\"  #>                 ldatecal                modelStrL  #> \"Launch date (calendar)\"                       \"\"   # display german variable labels varlabel(dat, lang=\"de\") #>                            id                         brand  #>               \"Numerische ID\"             \"Herstellermarke\"  #>                         model                          type  #>                  \"Automodell\"              \"Klassifikation\"  #>                            hp                           max  #>               \"Pferdestärken\"       \"Höchstgeschwindigkeit\"  #>                          <NA>                          <NA>  #>                            NA                            NA  #>                         ldate                      ldatecal  #>            \"Einführungsdatum\" \"Einführungsdatum (Kalender)\"  #>                          <NA>  #>                            NA   # display german variable label for brand varlabel(dat, var.name = \"brand\", lang=\"de\") #>             brand  #> \"Herstellermarke\"   # define new variable labels varlabel(dat) <- letters[1:ncol(dat)]  # display new variable labels varlabel(dat) #>        id     brand     model      type        hp       max   mileage      ecar  #>       \"a\"       \"b\"       \"c\"       \"d\"       \"e\"       \"f\"       \"g\"       \"h\"  #>     ldate  ldatecal modelStrL  #>       \"i\"       \"j\"       \"k\""},{"path":"/news/index.html","id":"readstata13-011","dir":"Changelog","previous_headings":"","what":"readstata13 0.11","title":"readstata13 0.11","text":"Initial support Stata 18 files. Import “.dtas”” files multiple data frames via read.dtas(). Alias variables currently ignored warning. ‘select.cols’ argument accepts either variable names column indices. Fix compilation musl non-glibc based systems. Add package alias readstata13.Rd","code":""},{"path":"/news/index.html","id":"readstata13-0101","dir":"Changelog","previous_headings":"","what":"readstata13 0.10.1","title":"readstata13 0.10.1","text":"CRAN release: 2023-02-21 Fix writing “NA” “NA_character_” values Fix writing STRLs big endian systems","code":""},{"path":"/news/index.html","id":"readstata13-0100","dir":"Changelog","previous_headings":"","what":"readstata13 0.10.0","title":"readstata13 0.10.0","text":"CRAN release: 2021-05-25 Fix sortlist attribute dta format 119 Fix compress option. past, unwanted conversions integer type occur. Fix encoding issues variable data labels Fix reading/writing format 119 Fix build FreeBSD New feature: improved handling time date formats New feature: collect warnings read.dta13","code":""},{"path":"/news/index.html","id":"readstata13-092","dir":"Changelog","previous_headings":"","what":"readstata13 0.9.2","title":"readstata13 0.9.2","text":"CRAN release: 2018-05-26 Fix build OSX","code":""},{"path":"/news/index.html","id":"readstata13-091","dir":"Changelog","previous_headings":"","what":"readstata13 0.9.1","title":"readstata13 0.9.1","text":"CRAN release: 2018-05-25 Allow reading pre-selected variables Experimental support format 119 Improve partial reading Export binary data dta-files New function get.label.tables() show Stata label sets Fix check duplicate labels Fixes set.lang","code":""},{"path":"/news/index.html","id":"readstata13-090","dir":"Changelog","previous_headings":"","what":"readstata13 0.9.0","title":"readstata13 0.9.0","text":"CRAN release: 2017-05-05 Generate unique factor labels prevent errors factor definition Check interrupt long read Fix storage size character vectors save.dta13 Fix saving characters containing missings Implement partial reading dta-files Fix integer bug saving data.frames length requiring uint64_t","code":""},{"path":"/news/index.html","id":"readstata13-085","dir":"Changelog","previous_headings":"","what":"readstata13 0.8.5","title":"readstata13 0.8.5","text":"CRAN release: 2016-09-09 Fix errors big-endian systems","code":""},{"path":"/news/index.html","id":"readstata13-084","dir":"Changelog","previous_headings":"","what":"readstata13 0.8.4","title":"readstata13 0.8.4","text":"CRAN release: 2016-09-06 Fix valgrind errors. converting dta.write writestr Fix empty data label Make replace.strl default","code":""},{"path":"/news/index.html","id":"readstata13-083","dir":"Changelog","previous_headings":"","what":"readstata13 0.8.3","title":"readstata13 0.8.3","text":"CRAN release: 2016-09-02 Restrict length varnames 32 chars compatibility Stata 14 Stop compression doubles floats. Now test compression doubles interger types possible. Add many function tests","code":""},{"path":"/news/index.html","id":"readstata13-082","dir":"Changelog","previous_headings":"","what":"readstata13 0.8.2","title":"readstata13 0.8.2","text":"CRAN release: 2016-02-20 Save NA values character vector empty string Convert.underscore=T convert non-literal characters underscores Fix saving Dates Save convert.factors default Test NaN inf values writing missing values replace NA Remove message saving factors","code":""},{"path":"/news/index.html","id":"readstata13-081","dir":"Changelog","previous_headings":"","what":"readstata13 0.8.1","title":"readstata13 0.8.1","text":"CRAN release: 2015-11-14 Convert non-integer variables factors (nonint.factors=T) Working strL variables now lot faster (thank Magnus Thor Torfason) Fix handling large datasets code cleanups","code":""},{"path":"/news/index.html","id":"readstata13-08","dir":"Changelog","previous_headings":"","what":"readstata13 0.8","title":"readstata13 0.8","text":"CRAN release: 2015-10-07 Implement reading version prior 13. Clean code. Fix crash varlables match ncols. Update leap seconds R code foreign.","code":""},{"path":"/news/index.html","id":"readstata13-071","dir":"Changelog","previous_headings":"","what":"readstata13 0.7.1","title":"readstata13 0.7.1","text":"CRAN release: 2015-08-07 Fix saving files > 2GB","code":""},{"path":"/news/index.html","id":"readstata13-07","dir":"Changelog","previous_headings":"","what":"readstata13 0.7","title":"readstata13 0.7","text":"CRAN release: 2015-05-11 read write Stata 14 files (ver 118) Fix save variables without non-missing values Read strings different file encodings Code cleanups","code":""},{"path":"/news/index.html","id":"readstata13-061","dir":"Changelog","previous_headings":"","what":"readstata13 0.6.1","title":"readstata13 0.6.1","text":"CRAN release: 2015-03-24 Fix heap overflow","code":""},{"path":"/news/index.html","id":"readstata13-06","dir":"Changelog","previous_headings":"","what":"readstata13 0.6","title":"readstata13 0.6","text":"CRAN release: 2015-03-22 Various fixes Reading stbcal-files","code":""},{"path":"/news/index.html","id":"readstata13-05","dir":"Changelog","previous_headings":"","what":"readstata13 0.5","title":"readstata13 0.5","text":"Write dta-files Read/write LSF MSF files Source testing cleaning Support multiple label languages (see http://www.stata.com/manuals13/dlabellanguage.pdf) Additional tools label handling","code":""},{"path":"/news/index.html","id":"readstata13-04","dir":"Changelog","previous_headings":"","what":"readstata13 0.4","title":"readstata13 0.4","text":"Convert.dates foreign::read.dta() Handle different NA values Convert strings system encoding checks label assignment","code":""},{"path":"/news/index.html","id":"readstata13-03","dir":"Changelog","previous_headings":"","what":"readstata13 0.3","title":"readstata13 0.3","text":"Reading file url. Example: read.dta13(\"http://www.stata-press.com/data/r13/auto.dta\") Convert.underscore foreign::read.dta(): converts _ . Missing.type parts foreign::read.dta(). TRUE return “missing” New replace.strl argument replace reference STRL string data.frame actual value","code":""},{"path":"/news/index.html","id":"readstata13-02","dir":"Changelog","previous_headings":"","what":"readstata13 0.2","title":"readstata13 0.2","text":"Read stata characteristics save extension.table attribute robust handling factor labels Set file encoding strings convert system encoding Fixed compiler warnings","code":""},{"path":"/news/index.html","id":"readstata13-01","dir":"Changelog","previous_headings":"","what":"readstata13 0.1","title":"readstata13 0.1","text":"Reading data files create data.frame Assign variable names Read new strL strings save attribute Convert stata label factors save attribute Read meta data (timestamp, dataset label, formats,…)","code":""}]
